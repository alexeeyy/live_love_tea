require("dotenv").config();
const { Telegraf, Markup } = require("telegraf");
const base = require("./const");

const bot = new Telegraf(process.env.BOT_TOKEN);

//======= START =======//
bot.start(async (ctx) => {
	try {
		return ctx.replyWithHTML("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", {
			reply_markup: {
				keyboard: [[{ text: "üìó  –ê—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç" }], [{ text: "‚¨áÔ∏è  –ü—ñ–¥–º–µ–Ω—é" }]],
				resize_keyboard: true,
			},
		});
	} catch (e) {
		console.error(e);
	}
});

bot.hears("‚¨áÔ∏è  –ü—ñ–¥–º–µ–Ω—é", async (ctx) => {
	try {
		return ctx.replyWithHTML("–ü—ñ–¥–º–µ–Ω—é:", {
			reply_markup: {
				keyboard: [[{ text: "üìú  –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" }, { text: "üõí  –ö–æ—à–∏–∫" }], [{ text: "üìû  –ö–æ–Ω—Ç–∞–∫—Ç–∏" }, { text: "‚ùó  –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è" }], [{ text: "üÜò  –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É" }], [{ text: "üîô  –ù–∞ –≥–æ–ª–æ–≤–Ω—É" }]],
				resize_keyboard: true,
			},
		});
	} catch (e) {
		console.error(e);
	}
});

bot.hears("üîô  –ù–∞ –≥–æ–ª–æ–≤–Ω—É", async (ctx) => {
	try {
		return ctx.replyWithHTML("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", {
			reply_markup: {
				keyboard: [[{ text: "üìó  –ê—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç" }], [{ text: "‚¨áÔ∏è  –ü—ñ–¥–º–µ–Ω—é" }]],
				resize_keyboard: true,
			},
		});
	} catch (e) {
		console.error(e);
	}
});

bot.hears("üìó  –ê—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç", async (ctx) => {
	try {
		return ctx.replyWithHTML("–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç:", {
			reply_markup: {
				inline_keyboard: [[Markup.button.callback("–®—É –ø—É–µ—Ä", "shu")], [Markup.button.callback("–®–µ–Ω –ø—É–µ—Ä", "shu")], [Markup.button.callback("–ß–µ—Ä–≤–æ–Ω–∏–π", "shu")], [Markup.button.callback("–ë—ñ–ª–∏–π", "shu")], [Markup.button.callback("–ó–µ–ª–µ–Ω–∏–π", "shu")], [Markup.button.callback("–£–ª—É–Ω", "shu")]],
				resize_keyboard: true,
			},
		});
	} catch (e) {
		console.error(e);
	}
});
bot.action("shu", async (ctx) => {
	try {
		await ctx.answerCbQuery();
		await ctx.deleteMessage();
		return ctx.replyWithPhoto(
			{
				source: base.shuList.first.src,
			},
			{
				caption: base.shuList.first.title + base.shuList.first.description + base.shuList.first.price,
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [[Markup.button.callback("–ü—Ä–∏–¥–±–∞—Ç–∏", "buy")], [Markup.button.callback("üõí 0.00‚Ç¥", "buy")], [Markup.button.callback("‚¨ÖÔ∏è", "backward"), Markup.button.callback("1/2", "number"), Markup.button.callback("‚û°Ô∏è", "forward")], [Markup.button.callback("‚Ü©Ô∏è  –Ω–∞–∑–∞–¥", "backToTeas")]],
				},
			}
		);
	} catch (e) {
		console.error(e);
	}
});
// bot.hears("‚ú®  –ö–∞—Ç–µ–≥–æ—Ä—ñ—è–º", async (ctx) => {
// 	try {
// 		return ctx.replyWithHTML("–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó:", {
// 			reply_markup: {
// 				keyboard: [[{ text: "üßò  –ô–æ–≥–∞" }, { text: "üçÉ  –ß–∞–π" }], [{ text: "‚òØÔ∏è  –¶—ñ–≥—É–Ω" }, { text: "üïâÔ∏è  –ú–µ–¥–∏—Ç–∞—Ü—ñ—è" }], [{ text: "üè†  –ù–∞ –≥–æ–ª–æ–≤–Ω—É" }]],
// 				resize_keyboard: true,
// 			},
// 		});
// 	} catch (e) {
// 		console.error(e);
// 	}
// });
// bot.hears("üçÉ  –ß–∞–π", async (ctx) => {
// 	try {
// 		return ctx.replyWithHTML("–ß–∞–π–Ω—ñ —ñ–≤–µ–Ω—Ç–∏:", {
// 			reply_markup: {
// 				keyboard: [[{ text: "üçÉ –ß–∞–π —Ç–∞ –¥–∑–∞–¥–∑–µ–Ω" }, { text: "üçµ  –ß–∞—é–≤–∞–Ω–Ω—è –ø–æ –¥–æ–º–∞—à–Ω—å–æ–º—É" }], [{ text: "üè†  –ù–∞ –≥–æ–ª–æ–≤–Ω—É" }]],
// 				resize_keyboard: true,
// 			},
// 		});
// 	} catch (e) {
// 		console.error(e);
// 	}
// });

// base.events.forEach((event) => {
// 	eventButtonAction(event.name, event.photo, event.text, event.master);
// });

// base.days.forEach((day) => {
// 	bot.hears(day, async (ctx) => {
// 		try {
// 			if (day === "–í–¢") {
// 				return ctx.replyWithHTML("–ü–æ–¥—ñ—ó –≤—ñ–≤—Ç–æ—Ä–∫–∞:", {
// 					reply_markup: {
// 						keyboard: [[{ text: "üßò  –ô–æ–≥–∞" }, { text: "‚òØÔ∏è  –¶—ñ–≥—É–Ω" }], [{ text: "üè†  –ù–∞ –≥–æ–ª–æ–≤–Ω—É" }]],
// 						resize_keyboard: true,
// 					},
// 				});
// 			}

// 			if (day === "–°–†") {
// 				return ctx.replyWithHTML("–ü–æ–¥—ñ—ó —Å–µ—Ä–µ–¥–∏:", {
// 					reply_markup: {
// 						keyboard: [[{ text: "üïâÔ∏è  –ú–µ–¥–∏—Ç–∞—Ü—ñ—è" }], [{ text: "üè†  –ù–∞ –≥–æ–ª–æ–≤–Ω—É" }]],
// 						resize_keyboard: true,
// 					},
// 				});
// 			}

// 			if (day === "–ß–¢") {
// 				return ctx.replyWithHTML("–ü–æ–¥—ñ—ó –ß–µ—Ç–≤–µ—Ä–≥–∞:", {
// 					reply_markup: {
// 						keyboard: [[{ text: "üßò  –ô–æ–≥–∞" }, { text: "‚òØÔ∏è  –¶—ñ–≥—É–Ω" }], [{ text: "üè†  –ù–∞ –≥–æ–ª–æ–≤–Ω—É" }]],
// 						resize_keyboard: true,
// 					},
// 				});
// 			}

// 			// if (day === "–°–ë") {
// 			// 	return ctx.replyWithHTML("–ü–æ–¥—ñ—ó —Å—É–±–æ—Ç–∏:", {
// 			// 		reply_markup: {
// 			// 			keyboard: [[{ text: "–¢–µ–ø–ª–∏–π Indoor Live Love Festival" }], [{ text: "üè†  –ù–∞ –≥–æ–ª–æ–≤–Ω—É" }]],
// 			// 			resize_keyboard: true,
// 			// 		},
// 			// 	});
// 			// }

// 			if (day === "–ù–î") {
// 				return ctx.replyWithHTML("–ü–æ–¥—ñ—ó –Ω–µ–¥—ñ–ª—ñ:", {
// 					reply_markup: {
// 						keyboard: [[{ text: "üçÅ  –¢–µ–ø–ª–∏–π Indoor Live Love Festival" }, { text: "üçµ  –ß–∞—é–≤–∞–Ω–Ω—è –ø–æ –¥–æ–º–∞—à–Ω—å–æ–º—É" }], [{ text: "üè†  –ù–∞ –≥–æ–ª–æ–≤–Ω—É" }]],
// 						resize_keyboard: true,
// 					},
// 				});
// 			}
// 		} catch (e) {
// 			console.error(e);
// 		}
// 	});
// });

//======= FUNCTIONS =======//
// function eventButtonAction(name, src, text, master) {
// 	bot.hears(name, async (ctx) => {
// 		try {
// 			if (src !== false) {
// 				return ctx.replyWithPhoto(
// 					{
// 						source: src,
// 					},
// 					{
// 						caption: text,
// 						reply_markup: {
// 							inline_keyboard: [[Markup.button.url("–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è", master)]],
// 						},
// 					}
// 				);
// 			} else {
// 				return ctx.replyWithHTML(text);
// 			}
// 		} catch (e) {
// 			console.error(e);
// 		}
// 	});
// }

// bot.hears("üíå  –ö–æ–Ω—Ç–∞–∫—Ç–∏", async (ctx) => {
// 	try {
// 		return ctx.replyWithHTML("<b>–ê–Ω–Ω–∞ –ü–∞–Ω—ñ–Ω–∞</b> - –º–∞–º–∞ —Å–ø–µ–π—Å—É, —Ç–∞ –Ω–∞—à –≤–∏–∫–ª–∞–¥–∞—á –∑ –π–æ–≥–∏.", Markup.inlineKeyboard([[Markup.button.url("–ó–≤'—è–∑–∞—Ç–∏—Å—è", "t.me/annaliveloveyoga")]]));
// 	} catch (e) {
// 		console.error(e);
// 	}
// });
// bot.hears("üè†  –ù–∞ –≥–æ–ª–æ–≤–Ω—É", async (ctx) => {
// 	try {
// 		return ctx.replyWithHTML("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", {
// 			reply_markup: {
// 				keyboard: [[{ text: "üéâ  –†–æ–∑–∫–ª–∞–¥ –ø–æ–¥—ñ–π" }, { text: "üíå  –ö–æ–Ω—Ç–∞–∫—Ç–∏" }]],
// 				resize_keyboard: true,
// 			},
// 		});
// 	} catch (e) {
// 		console.error(e);
// 	}
// });

bot.launch();
